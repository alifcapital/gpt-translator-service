import os
import telebot

import logging

from gpt_api_class import HR_RAG

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram-–±–æ—Ç–∞
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


ALLOWED_USERNAMES = "https://t.me/Muborov_Alisher_720"



if not TELEGRAM_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")

#  –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ RAG
bot = telebot.TeleBot(TELEGRAM_TOKEN)
gpt_rag = HR_RAG()

# üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ GPT –¥–ª—è Telegram
import re
def format_violation_response(raw_text: str) -> str:
    lines = raw_text.splitlines()
    result = []

    for line in lines:
        # –£–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è **...**
        line = re.sub(r"\*\*(.*?)\*\*", r"\1", line)

        # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown ###
        line = re.sub(r"^#+\s*", "", line).strip()

        if "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:" in line:
            result.append("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: " + line.split("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")[-1].strip())
        elif "–ü—É–Ω–∫—Ç –∏–ª–∏ —Ä–∞–∑–¥–µ–ª:" in line:
            result.append("–ü—É–Ω–∫—Ç –∏–ª–∏ —Ä–∞–∑–¥–µ–ª: " + line.split("–ü—É–Ω–∫—Ç –∏–ª–∏ —Ä–∞–∑–¥–µ–ª:")[-1].strip())
        elif "–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—Ä—É—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è:" in line:
            result.append("–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è: " + line.split("–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—Ä—É—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è:")[-1].strip())
        elif "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:" in line:
            result.append("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: " + line.split("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:")[-1].strip())
        elif "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:" in line:
            result.append("–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è: " + line.split("–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:")[-1].strip())
        elif "–û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è:" in line:
            result.append("–°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å: " + line.split("–û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è:")[-1].strip())
        elif "–ò—Ç–æ–≥" in line:
            result.append("\n–ò—Ç–æ–≥:")
        else:
            result.append(line.strip())

    return "\n".join(result)




# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ username
def check_auth(message):
    user = message.from_user
    user_id = user.id
    username = f"@{user.username}" if user.username else "–±–µ–∑ username"

    log_data = {
        'user_id': user_id,
        'username': username,
        'first_name': user.first_name,
        'last_name': user.last_name
    }

    if not user.username:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram!")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {log_data}")
        return False

    if user.username not in ALLOWED_USERNAMES:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è: {log_data}")
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—à username –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.")
        return False

    logger.info(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: {log_data}")
    return True


#  –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not check_auth(message):
        return

    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø HR –±–æ—Ç. –û–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞—Ä—É—à–µ–Ω—ã."
    )


#  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_query(message):
    if not check_auth(message):
        return

    user_query = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {user_query}")

    temp_message = bot.send_message(message.chat.id, "–ò—â—É –æ—Ç–≤–µ—Ç...")

    try:
        answer = gpt_rag.ask(user_query)

        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å: {answer}")

        formatted = format_violation_response(answer)

        bot.delete_message(chat_id=message.chat.id, message_id=temp_message.message_id)
        bot.send_message(message.chat.id, formatted)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        bot.delete_message(chat_id=message.chat.id, message_id=temp_message.message_id)
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

#  –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)